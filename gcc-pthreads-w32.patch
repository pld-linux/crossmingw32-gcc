--- gcc-9.5.0/libgcc/gthr-posix.h.orig	2022-05-27 09:21:12.915389144 +0200
+++ gcc-9.5.0/libgcc/gthr-posix.h	2023-04-21 21:34:01.235216833 +0200
@@ -372,7 +372,7 @@ __gthread_objc_thread_detach (void (*fun
 
   if (!(__gthrw_(pthread_create) (&new_thread_handle, &_objc_thread_attribs,
 				  (void *) func, arg)))
-    thread_id = (objc_thread_t) new_thread_handle;
+    thread_id = (objc_thread_t) new_thread_handle.p;
   else
     thread_id = NULL;
 
@@ -469,7 +469,7 @@ static inline objc_thread_t
 __gthread_objc_thread_id (void)
 {
   if (__gthread_active_p ())
-    return (objc_thread_t) __gthrw_(pthread_self) ();
+    return (objc_thread_t) __gthrw_(pthread_self) ().x;
   else
     return (objc_thread_t) 1;
 }
--- gcc-11.5.0/libstdc++-v3/include/std/thread.orig	2024-07-19 07:52:47.505554777 +0200
+++ gcc-11.5.0/libstdc++-v3/include/std/thread	2024-08-15 22:13:23.114429860 +0200
@@ -60,7 +60,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
 #if __cpp_lib_three_way_comparison
   inline strong_ordering
   operator<=>(thread::id __x, thread::id __y) noexcept
-  { return __x._M_thread <=> __y._M_thread; }
+  { return __x._M_thread.p <=> __y._M_thread.p; }
 #else
   inline bool
   operator!=(thread::id __x, thread::id __y) noexcept
@@ -71,7 +71,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
   {
     // Pthreads doesn't define any way to do this, so we just have to
     // assume native_handle_type is LessThanComparable.
-    return __x._M_thread < __y._M_thread;
+    return __x._M_thread.p < __y._M_thread.p;
   }
 
   inline bool
--- gcc-11.5.0/libstdc++-v3/include/bits/std_thread.h.orig	2024-07-19 07:52:47.461554039 +0200
+++ gcc-11.5.0/libstdc++-v3/include/bits/std_thread.h	2024-08-16 07:28:49.547218422 +0200
@@ -290,7 +290,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     // can't safely use __gthread_equal on default-constructed values (nor
     // the non-zero value returned by this_thread::get_id() for
     // single-threaded programs using GNU libc). Assume EqualityComparable.
-    return __x._M_thread == __y._M_thread;
+    return __x._M_thread.p == __y._M_thread.p;
   }
 
   // N.B. other comparison operators are defined in <thread>
@@ -303,7 +303,7 @@ _GLIBCXX_BEGIN_NAMESPACE_VERSION
     {
       size_t
       operator()(const thread::id& __id) const noexcept
-      { return std::_Hash_impl::hash(__id._M_thread); }
+      { return std::_Hash_impl::hash(__id._M_thread.p); }
     };
 
   namespace this_thread
